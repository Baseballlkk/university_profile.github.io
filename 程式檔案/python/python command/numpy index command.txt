#random 
np.random.rand(<num>)

# sak for value
<list>[:n]   (0~n-1)
<list>[n:]   (n~end)

# indice 
<var> = [<array of index>]   
<array>[var]   (one dimension)

<var1> = [<array1 of index>]
<var2> = [<array2 of index>]
<array>[<var1>,<var2>]   (two dimension)

# sort
np.sort(<array>,axis = )
[axis = None: small to big, count as 1 dimension array]
[axis = 0: small to big in a column,sorted up side down]
[axis = -1: small to big in a row, sorted left side right]

# max and min
## for value
np.amax(<array>,axis = )
np.amin(<array>,axis = )

## for location
np.argmax(<array>,axis = )
np.argmin(<array>,axis = )

[axis = 0: in column]
[axis = 1: in row]
[default: in all]

# check by the condition 
<var> = <condition>
<array>[<var>]   (output the consequence with True and False)

<var>.sum()   (sum of True in whole array)
<var>.sum(0)   (sum of True in one column)

# Written one dimension of value that is satisfied with <mask_var>
<array>[<mask_var>]   

# replace value
<array> = np.where(<mask_var>,<original array>,<new value>)

# find nan
np.isnan(<array>)

# count nan
np.isnan(<array>).sum(0)




